// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/rosenhouse/cnsim/models"
)

type SteadyStateSimulator struct {
	ExecuteStub        func(logger lager.Logger, req models.SteadyStateRequest) (*models.SteadyStateResponse, error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		logger lager.Logger
		req    models.SteadyStateRequest
	}
	executeReturns struct {
		result1 *models.SteadyStateResponse
		result2 error
	}
	ValidateStub        func(req models.SteadyStateRequest) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		req models.SteadyStateRequest
	}
	validateReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SteadyStateSimulator) Execute(logger lager.Logger, req models.SteadyStateRequest) (*models.SteadyStateResponse, error) {
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		logger lager.Logger
		req    models.SteadyStateRequest
	}{logger, req})
	fake.recordInvocation("Execute", []interface{}{logger, req})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(logger, req)
	} else {
		return fake.executeReturns.result1, fake.executeReturns.result2
	}
}

func (fake *SteadyStateSimulator) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *SteadyStateSimulator) ExecuteArgsForCall(i int) (lager.Logger, models.SteadyStateRequest) {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].logger, fake.executeArgsForCall[i].req
}

func (fake *SteadyStateSimulator) ExecuteReturns(result1 *models.SteadyStateResponse, result2 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 *models.SteadyStateResponse
		result2 error
	}{result1, result2}
}

func (fake *SteadyStateSimulator) Validate(req models.SteadyStateRequest) error {
	fake.validateMutex.Lock()
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		req models.SteadyStateRequest
	}{req})
	fake.recordInvocation("Validate", []interface{}{req})
	fake.validateMutex.Unlock()
	if fake.ValidateStub != nil {
		return fake.ValidateStub(req)
	} else {
		return fake.validateReturns.result1
	}
}

func (fake *SteadyStateSimulator) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *SteadyStateSimulator) ValidateArgsForCall(i int) models.SteadyStateRequest {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return fake.validateArgsForCall[i].req
}

func (fake *SteadyStateSimulator) ValidateReturns(result1 error) {
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *SteadyStateSimulator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return fake.invocations
}

func (fake *SteadyStateSimulator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
