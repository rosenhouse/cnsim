// This file was generated by counterfeiter
package fakes

import "sync"

type MeanParameterizedDiscreteDistribution struct {
	SampleStub        func(mean float64) (int, error)
	sampleMutex       sync.RWMutex
	sampleArgsForCall []struct {
		mean float64
	}
	sampleReturns struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MeanParameterizedDiscreteDistribution) Sample(mean float64) (int, error) {
	fake.sampleMutex.Lock()
	fake.sampleArgsForCall = append(fake.sampleArgsForCall, struct {
		mean float64
	}{mean})
	fake.recordInvocation("Sample", []interface{}{mean})
	fake.sampleMutex.Unlock()
	if fake.SampleStub != nil {
		return fake.SampleStub(mean)
	} else {
		return fake.sampleReturns.result1, fake.sampleReturns.result2
	}
}

func (fake *MeanParameterizedDiscreteDistribution) SampleCallCount() int {
	fake.sampleMutex.RLock()
	defer fake.sampleMutex.RUnlock()
	return len(fake.sampleArgsForCall)
}

func (fake *MeanParameterizedDiscreteDistribution) SampleArgsForCall(i int) float64 {
	fake.sampleMutex.RLock()
	defer fake.sampleMutex.RUnlock()
	return fake.sampleArgsForCall[i].mean
}

func (fake *MeanParameterizedDiscreteDistribution) SampleReturns(result1 int, result2 error) {
	fake.SampleStub = nil
	fake.sampleReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *MeanParameterizedDiscreteDistribution) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sampleMutex.RLock()
	defer fake.sampleMutex.RUnlock()
	return fake.invocations
}

func (fake *MeanParameterizedDiscreteDistribution) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
